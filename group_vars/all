---
# file: group_vars/all

# Domain name to be used
domain_name: "" # FILL OUT

# for basic server setup (in my opinion)
basics:
  enabled: true
  # reboot machine
  reboot: true

  # user's home dir
  home_dir: "/home/{{ ansible_user }}"

  # dir to pull repos into
  repos_dir: "/home/{{ ansible_user }}/repos"

# vnc for remote desktop with GUI
vnc:
  enabled: true
  # will be truncated to 8 characters
  password: "" # FILL OUT
  # display for what port will be accessed
  # use 0-9 only for access port to be 590{{display}}
  display: "4"

  # working directory for the VNC session
  working_dir: "/home/{{ ansible_user }}"

# squid credentials, for proxy
squid:
  enabled: true
  username: "" # FILL OUT
  password: "" # FILL OUT
  port: "3128"

# sambashare for network attached storage
smb:
  enabled: true
  password: "" # FILL OUT
  share_name: "sambashare"

  # the directory to share
  share_dir: "/home/{{ ansible_user }}"

# If you are using cloudflare and want to auto update entries
# when the server IP changes
# NOTE: It doesnt add entries, refer to the README.md file for instructions
cloudflare:
  enabled: true

  # Set your Cloudflare Zone ID
  zone_id: "" # FILL OUT

  # Set your Cloudflare Bearer token to view the zone and edit DNS records in it
  auth_key: "" # FILL OUT

# ==== Select what charts you wish to install ====
charts:
  enabled: true
  
  resources:
    # kubernetes resource requests for the pods
    requests:
      cpu: 10m
      memory: 50M
  
    # kubernetes resource limits for the pods
    # leave some headroom for the OS to not lose server access in case of an issue
    limits:
      cpu: 4
      memory: "6000M"
  
  # timeout as helm expects it in --timeout for the charts
  timeout: 15m
  
  services:

    # directory in which the apps will store their configs
    configs_dir: "/home/{{ ansible_user }}/data/app-configs"

    # provision hostPaths using this controller
    local_path_provisioner:
      enabled: true
      version: "v0.0.31"
    
    # nginx ingress controller for reverse proxy
    ingress_nginx:
      enabled: true
    
    # manager for tls certs
    cert_manager:
      enabled: true
      # email for the ACME account registration
      # FYI: you dont need to create any account for this, just use an email ID
      email: "" # FILL OUT
    
    # log monitoring with Loki (Needs Grafana for a UI)
    loki_stack:
      enabled: true
    
    # metrics monitoring with Grafana and Prometheus
    kube_prometheus_stack:
      enabled: true
      grafana:
        admin_username: "admin" # FILL OUT
        admin_password: "admin" # FILL OUT
    
    # cloud native instance of postgres DB
    cnpg:
      enabled: true

    # google photos alternative
    # NOTE: REQUIRES YOU TO HAVE CNPG INSTALLED BEFORE
    #       - Either set `cnpg.enabled` to true or
    #       - make sure you have installed it first (incase of an upgrade)
    immich:
      enabled: true
      # base dir for all immich info, including backups, cache, etc
      # look at `install-charts.yaml` for more information
      host_path: "/home/{{ ansible_user }}/data/immich"

    # home automation portal
    home_assistant:
      enabled: true

    # media client
    jellyfin:
      enabled: true
    
    # torrents
    qbittorrent:
      enabled: true

      # dirs to download files
      # you can specify different mounts present on your server
      # NOTE: The 'name' must follow the following regex validation: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      #       If you dont know what that means, just use lower case characters
      #       and dashes to separate them or a mix of upper and lowercase characters
      persistence:
        - name: root-disk
          host_path: "/home/{{ ansible_user }}/data/downloads"
        # - name: spare-disk
        #   host_path: "/mnt/b/downloads"
    
    # to bypass cloudflare protection
    flaresolverr:
      enabled: true
    
    # to manage indexers
    prowlarr:
      enabled: true
    
    # movie monitoring
    radarr:
      enabled: true

      # dirs to store and organise movies
      # you can specify different mounts present on your server
      # NOTE: The 'name' must follow the following regex validation: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      #       If you dont know what that means, just use lower case characters
      #       and dashes to separate them or a mix of upper and lowercase characters
      persistence:
        - name: root-disk
          host_path: "/home/{{ ansible_user }}/data/movies"
        # - name: spare-disk
        #   host_path: "/mnt/b/movies"

    # show monitoring
    sonarr:
      enabled: true

      # dirs to store and organise shows
      # you can specify different mounts present on your server
      # NOTE: The 'name' must follow the following regex validation: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      #       If you dont know what that means, just use lower case characters
      #       and dashes to separate them or a mix of upper and lowercase characters
      persistence:
        - name: root-disk
          host_path: "/home/{{ ansible_user }}/data/shows"
        # - name: spare-disk
        #   host_path: "/mnt/b/shows"
    
    # subtitle hunting
    bazarr:
      enabled: true
    
    # movie and show interface
    jellyseerr:
      enabled: true

    # speed test to server
    librespeed:
      enabled: true

    # book monitoring
    readarr:
      enabled: true

      # dirs to store and organise books
      # you can specify different mounts present on your server
      # NOTE: The 'name' must follow the following regex validation: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      #       If you dont know what that means, just use lower case characters
      #       and dashes to separate them or a mix of upper and lowercase characters
      persistence:
        - name: root-disk
          host_path: "/home/{{ ansible_user }}/data/books"
        # - name: spare-disk
        #   host_path: "/mnt/b/books"

    # music monitoring
    lidarr:
      enabled: true

      # dirs to store and organise music
      # you can specify different mounts present on your server
      # NOTE: The 'name' must follow the following regex validation: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      #       If you dont know what that means, just use lower case characters
      #       and dashes to separate them or a mix of upper and lowercase characters
      persistence:
        - name: root-disk
          host_path: "/home/{{ ansible_user }}/data/music"
        # - name: spare-disk
        #   host_path: "/mnt/b/music"

    # book client
    calibre_web:
      enabled: false

    # book management
    calibre:
      enabled: false

    # movie, show and music interface
    ombi:
      enabled: false


# ==== k8s settings ====

kubespray:
  enabled: true
  
  # Use reset.yml to reset cluster
  playbook: "cluster.yml"
  # extra args for playbook
  playbook_args: "-e reset_confirmation=yes"

  # release branch from the repo: https://github.com/kubernetes-sigs/kubespray
  release: "release-2.27"

  # enable addons config
  addons: []
  # - helm_enabled
  # - ingress_nginx_enabled
  # - cert_manager_enabled
  # - metallb_enabled
  # - local_path_provisioner_enabled
  
  # enable cluster yml config
  k8s_cluster: []
  # - kube_proxy_strict_arp
  

# to allow pinless bluetooth connections to the server
bluetooth:
  pinless:
    enabled: false

# ==== For the Archived playbooks ====

spotify: # spotify settings
  enabled: false
  username: "NO_NEED_TO_FILL"
  password: "NO_NEED_TO_FILL"
  init_volume: "69"
