---
- name: Install basic charts
  hosts: all
  gather_facts: true
  vars:
    namespace_user: "{{ ansible_user }}"
    namespace_monitoring: monitoring
    namespace_generic_services: generic-services
    default_grafana_admin_password: "{{ ansible_user }}"
  tasks:
    # NOTE: fsgroup is not supported for hostpaths, but it is still present here
    - name: Create namespaces namespace
      shell: "kubectl create namespace {{ item }}"
      ignore_errors: True
      with_items:
        - "{{ namespace_monitoring }}"
        - "{{ namespace_user }}"
        - "{{ namespace_generic_services }}"

    - include_tasks: tasks-allow-ports.yaml
      vars:
        ports:
          - "8080"
          - "8081"
    
    - name: Expose nginx ingress controller
      include_tasks: tasks-kubernetes-port-forward-service.yaml
      vars:
        service_name: SKIP
        service_file_name: nginx-ingress-controller.service
        service_file_location_base: /etc/systemd/system/
        host_port: 8080
        service_port: 80
    
    - name: Expose nginx ingress controller for SSL
      include_tasks: tasks-kubernetes-port-forward-service.yaml
      vars:
        service_name: SKIP
        service_file_name: nginx-ingress-controller-ssl.service
        service_file_location_base: /etc/systemd/system/
        host_port: 8081
        service_port: 443

    - debug:
        msg: You can access the ingress controller at port '8080' and '8081' for HTTP and HTTPS.

    - name: Install grafana
      block:
      - name: Install/Upgrade the grafana chart
        include_tasks: tasks-install-chart.yaml
        # https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
        vars:
          repo_name: prometheus-community
          repo_link: https://prometheus-community.github.io/helm-charts
          install_namespace: "{{ namespace_monitoring }}"
          release_name: kube-prometheus-stack
          chart_name: kube-prometheus-stack
          set_options: "--set \
            prometheus.prometheusSpec.retention=730d,\
            grafana.persistence.enabled=true,\
            prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.accessModes={'ReadWriteOnce'},\
            prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage='50Gi',\
            prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false,\
            prometheus.prometheusSpec.serviceMonitorNamespaceSelector=null,\
            prometheus.prometheusSpec.serviceMonitorSelector=null,\
            prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false,\
            prometheus.prometheusSpec.ruleNamespaceSelector=null,\
            prometheus.prometheusSpec.ruleSelector=null,\
            prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false,\
            prometheus.prometheusSpec.podMonitorNamespaceSelector=null,\
            prometheus.prometheusSpec.podMonitorSelector=null,\
            prometheus.prometheusSpec.probeSelectorNilUsesHelmValues=false,\
            prometheus.prometheusSpec.probeSelectorNamespaceSelector=null,\
            prometheus.prometheusSpec.probeSelector=null,\
            grafana.ingress.enabled=true,\
            grafana.ingress.ingressClassName=nginx,\
            grafana.ingress.hosts={grafana.{{ domain_name }}},\
            grafana.ingress.enabled=true"
            
      - name: "Reset Grafana admin password to '{{ default_grafana_admin_password }}'"  
        shell: "kubectl exec -it -n {{ namespace_monitoring }} $(kubectl get pods -n {{ namespace_monitoring }} | grep grafana | awk '{print $1}') -c grafana -- grafana-cli admin reset-admin-password {{ default_grafana_admin_password }}"
      
      - debug:
          msg: >
            You can log into Grafana at 'grafana.{{ domain_name }}' using
            admin/{{ default_grafana_admin_password }}"

    - name: Install jellyfin
      # https://artifacthub.io/packages/helm/k8s-at-home/jellyfin
      block:
      - name: Install/Upgrade the jellyfin chart
        include_tasks: tasks-install-chart.yaml
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: jellyfin
          chart_name: jellyfin
          # "common.securityContext.privileged=true" is to allow the pod
          # to be able to use the dev mount to access /dev/dri/renderD128 for
          # hwa
          set_options: "--set \
            controller.type=statefulset,\
            common.securityContext.privileged=true,\
            persistence.config.enabled=yes,\
            persistence.cache.enabled=true,\
            persistence.cache.accessMode=ReadWriteOnce,\
            persistence.cache.size=50G,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            persistence.dev.enabled=yes,\
            persistence.dev.type=hostPath,\
            persistence.dev.mountPath=/dev,\
            persistence.dev.hostPath=/dev,\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='jellyfin.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=jellyfin,\
            ingress.main.hosts[0].paths[0].service.port=8096"

      - debug:
          msg: >
              You can log into Jellyfin at 'jellyfin.{{ domain_name }}'.
              '{{ dir_home }}' is available under '/media' and can be used by
              Jellyfin. If need be, delete any existing server and go to the
              URL mention above once again to setup a new server.

    - name: Install qbittorrent
      block:
      - name: Install/Upgrade the qbittorrent chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/qbittorrent
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: qbittorrent
          chart_name: qbittorrent
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='qbittorrent.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=qbittorrent,\
            ingress.main.hosts[0].paths[0].service.port=8080"

      - debug:
          msg: >
            You can log into qBittorrent at 'qbittorrent.{{ domain_name }}' using
            admin/adminadmin as the default creds. Change this after deployment.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application to download things. Downloading in
            the directories under {{ dir_data }} will be picked up by Jellyfin.

    - name: Install prowlarr
      block:
      - name: Install/Upgrade the prowlarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/prowlarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: prowlarr
          chart_name: prowlarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='prowlarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=prowlarr,\
            ingress.main.hosts[0].paths[0].service.port=9696"

      - debug:
          msg: >
            You can log into prowlarr at 'prowlarr.{{ domain_name }}'. Go to this
            URL and add the indexers you wish to use.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application to download things. Downloading in
            the directories under {{ dir_data }} will be picked up by Jellyfin.

    - name: Install radarr
      block:
      - name: Install/Upgrade the radarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/radarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: radarr
          chart_name: radarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='radarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=radarr,\
            ingress.main.hosts[0].paths[0].service.port=7878"

      - debug:
          msg: >
            You can log into radarr at 'radarr.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application to download things. Downloading in
            the directories under {{ dir_data }} will be picked up by Jellyfin.

    - name: Install sonarr
      block:
      - name: Install/Upgrade the sonarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/sonarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: sonarr
          chart_name: sonarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='sonarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=sonarr,\
            ingress.main.hosts[0].paths[0].service.port=8989"

      - debug:
          msg: >
            You can log into sonarr at 'sonarr.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application to download things. Downloading in
            the directories under {{ dir_data }} will be picked up by Jellyfin.

    - name: Install bazarr
      block:
      - name: Install/Upgrade the bazarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/bazarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: bazarr
          chart_name: bazarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='bazarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=bazarr,\
            ingress.main.hosts[0].paths[0].service.port=6767"

      - debug:
          msg: >
            You can log into bazarr at 'bazarr.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application.

    - name: Install readarr
      block:
      - name: Install/Upgrade the readarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/readarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: readarr
          chart_name: readarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='readarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=readarr,\
            ingress.main.hosts[0].paths[0].service.port=8787"

      - debug:
          msg: >
            You can log into readarr at 'readarr.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application.

    - name: Install lidarr
      block:
      - name: Install/Upgrade the lidarr chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/lidarr
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: lidarr
          chart_name: lidarr
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            common.podSecurityContext.runAsUser=1000,\
            common.podSecurityContext.runAsGroup=568,\
            common.podSecurityContext.fsGroup=568,\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='lidarr.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=lidarr,\
            ingress.main.hosts[0].paths[0].service.port=8686"

      - debug:
          msg: >
            You can log into lidarr at 'lidarr.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application.

    - name: Install ombi
      # https://artifacthub.io/packages/helm/k8s-at-home/ombi
      block:
      - name: Install/Upgrade the ombi chart
        include_tasks: tasks-install-chart.yaml
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: ombi
          chart_name: ombi
          set_options: "--set \
            controller.type=statefulset,\
            persistence.config.enabled=yes,\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='ombi.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=ombi,\
            ingress.main.hosts[0].paths[0].service.port=3579"

      - debug:
          msg: >
              You can log into ombi at 'ombi.{{ domain_name }}'.
              '{{ dir_home }}' is available under '/media' and can be used by
              ombi. If need be, delete any existing server and go to the
              URL mention above once again to setup a new server.

    - name: Install librespeed
      block:
      - name: Install/Upgrade the librespeed chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/librespeed
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: librespeed
          chart_name: librespeed
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            persistence.config.enabled=yes,\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='librespeed.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=librespeed,\
            ingress.main.hosts[0].paths[0].service.port=80"

      - debug:
          msg: >
            You can log into librespeed at 'librespeed.{{ domain_name }}'.

    - name: Install calibre-web
      block:
      - name: Install/Upgrade the calibre-web chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/calibre-web
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: calibre-web
          chart_name: calibre-web
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            env.PUID=\"1000\",\
            env.PGID=\"568\",\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            ingress.main.enabled=true,\
            ingress.main.primary=false,\
            ingress.main.ingressClassName=nginx,\
            ingress.main.hosts[0].host='calibre-web.{{ domain_name }}',\
            ingress.main.hosts[0].paths[0].path='/',\
            ingress.main.hosts[0].paths[0].pathType='Prefix',\
            ingress.main.hosts[0].paths[0].service.name=calibre-web,\
            ingress.main.hosts[0].paths[0].service.port=8083"

      - debug:
          msg: >
            You can log into calibre-web at 'calibre-web.{{ domain_name }}'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application.

    - name: Install calibre
      block:
      - name: Install/Upgrade the calibre chart
        include_tasks: tasks-install-chart.yaml
        # https://artifacthub.io/packages/helm/k8s-at-home/calibre
        vars:
          repo_name: k8s-at-home
          repo_link: https://k8s-at-home.com/charts/
          install_namespace: "{{ namespace_generic_services }}"
          release_name: calibre
          chart_name: calibre
          # runAsUser=1000 gives write access on the pod
          # 568 is the default user ID, added to the groups cause why not
          set_options: "--set \
            controller.type=statefulset,\
            common.dnsConfig.nameservers={8.8.8.8,8.8.4.4},\
            env.PUID=\"1000\",\
            env.PGID=\"568\",\
            persistence.config.enabled=yes,\
            persistence.media.enabled=yes,\
            persistence.media.type=hostPath,\
            persistence.media.mountPath={{ dir_mount_path }},\
            persistence.media.hostPath={{ dir_minikube_mount }},\
            service.webserver.enabled=true"

      - name: Expose calibre service
        include_tasks: tasks-kubernetes-port-forward-service.yaml
        vars:
          service_name: calibre
          service_file_name: calibre.service
          service_file_location_base: /etc/systemd/system/
          service_namespace: "{{ namespace_generic_services }}"
          host_port: 3002

      - include_tasks: tasks-allow-ports.yaml
        vars:
          ports:
            - "3002"

      - debug:
          msg: >
            You can log into calibre at '{{ ip }}:3002'.
            '{{ dir_home }}' from the host is available under '/media' and
            can be used by the application.
